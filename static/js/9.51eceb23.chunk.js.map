{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","utils/erc20.ts","views/Home/components/Divider.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","views/Home/components/Mechanics.tsx","views/Home/components/MechanicsUp.tsx","views/Home/components/MechanicsDown.tsx","views/Home/components/ChangeLog.tsx","views/Home/components/Perimetry.tsx","views/Home/components/VanguardInfo.tsx","views/Home/components/ContractInfo.tsx","views/Home/components/InfoCard.tsx","views/Home/Home.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","styled","div","theme","colors","textSubtle","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","CardValue","value","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","StyledCakeStats","Card","Row","CakeStats","TranslateString","burnedBalance","farms","useFarms","eggPrice","usePriceCakeBusd","circSupply","minus","cakeSupply","marketCap","times","yumchaPerBlock","Mechanics","useTotalValue","style","textAlign","MechanicsUp","MechanicsDown","ChangeLog","Perimetry","VanguardInfo","ContractInfo","InfoCard","totalValue","mediaQueries","lg","Cards","BaseLayout","sm","Home","faPlayCircle","faTachometerAlt","faBook","faTelegram","faTwitter","Page","display","alignItems","justifyContent","href","color","fontFamily","marginBottom","Divider"],"mappings":"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","file":"static/js/9.51eceb23.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 0px;\n  margin: 0 auto 64px;\n  width: 100%;\n`\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Yumcha Tokenomics</Text></Row>\n\n        <Row><Text bold fontSize=\"13px\">Yumcha tokens earn revenue from the following sources:</Text></Row>\n        <Row><Text fontSize=\"13px\">- Yield farming of dimSim reserves from external farms</Text></Row>\n        <Row><Text fontSize=\"13px\">- Arbitrage from the minting and buyback of dimSims</Text></Row>\n\n        <Row><Text bold fontSize=\"13px\">Yumcha tokens are provided to liquidity providers:</Text></Row>\n        <Row>\n          <Text fontSize=\"13px\">- yumcha per block for the first year</Text>\n          <Text bold fontSize=\"13px\">1.0888</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- yumcha per block for the second year</Text>\n          <Text bold fontSize=\"13px\">0.8166</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- yumcha per block for the third year</Text>\n          <Text bold fontSize=\"13px\">0.5444</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- yumcha per block for the fourth year</Text>\n          <Text bold fontSize=\"13px\">0.2722</Text>\n        </Row>\n        \n        <Row><Text bold fontSize=\"13px\">The current circulating yumcha supply:</Text></Row>\n        <Row>\n          <Text fontSize=\"13px\">- {TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"13px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- {TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"13px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- {TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"13px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"13px\">- {TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"13px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst Mechanics = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Mechanics</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The following example to demonstrates the mechanics of the peg mechanism which generates profit for yumcha holders in either direction.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Base Example</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>There are 1000 dimSim minted (ycVT) that follow the ETF VT which is priced at 100. The total reserve required would equal (1000 ycVT x 100 price of VT) = 100k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- 10k (10%) of this would be held by Perimetry Pty Ltd where a long position of 1000 VTs would be held.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- 10k (10%) of the reserve would be held in cryptocurrency wallets as stable coins to ensure liquidity.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- 10k (10%) of the reserve would be held in cryptocurrency wallets as yumcha tokens.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- 70k (70%) of the reserve would be held in yield farms in various platforms across multiple chains. These yields allow for buyback of yumcha tokens and also provide additional buffer for the reserve.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default Mechanics\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst MechanicsUp = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Mechanics (Scenario Up)</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Price of ycVT stays at 100 whilst VT increases to 110</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve requirement is now (1000 ycVT x 110 price of VT) = 110k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>A profit of 10k is generated by the Perimetry position which is passed back to the reserve. Assets now equal 110k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve would be used to purchase ycVT until the price is back to parity. Say 100 ycVT is purchased at an average price of 105 which costs 10.5k. Assets are now equal to 110k - 10.5k = 99.5k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The circulating supply of ycVT has dropped and now the reserve requirement is (900 ycVT x 110 price of VT) = 99k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>There is now an excess of assets (99.5k) over the reserve (99k) allowing for further buyback of yumcha.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The position with Perimetry will be decreased to 900 VTs to reflect the decreased ycVT circulation.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default MechanicsUp\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst MechanicsDown = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Mechanics (Scenario Down)</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Price of ycVT increases to 110 whilst VT stays at 100</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve requirement remains unchanged at (1000 ycVT x 100 price of VT) = 100k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>No profit is generated by the Perimetry position. Assets remain at 100k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve would be used to sell ycVT until the price is back to parity. Say 100 ycVT is sold at an average price of 105 which generates 10.5k. Assets are now equal to 100k + 10.5k = 110.5k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The circulating supply of ycVT has increased and now the reserve requirement is (1100 ycVT x 100 price of VT) = 110k.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>There is now an excess of assets (110.5k) over the reserve (110k) allowing for further buyback of yumcha.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The position with Perimetry will be increased to 1100 VTs to reflect the increased ycVT circulation.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default MechanicsDown\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst ChangeLog = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Yumcha Phases</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Phase 1 Proof of Concept - 28 March 2021 to 27 May 2021</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>This phase launched Yumcha token and Masterchef as well as ycVT, the first dimSim that is pegged to VT (Vanguard World Total Stocks ETF).</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Safety and reliability were key factors in the decision to fork the contract code from Goose Defi. Pancakeswap was chosen for the provision of liquidity tokens and developers LP tokens have been locked on Unicrypt.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>We trialled various peg methodologies including asset backed and synthetics. We also experienced a substantial stress test on the peg which provided valuable information on optimal strategies.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Phase 2 Optimisation - 28 May 2021 to Current</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Registration of Perimetry Ptd Ltd to bridge the gap between real world shares and cryptocurrency.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Commencement of yield farming with collateral to buyback and burn yumcha tokens.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Updated front end to address concerns from users from POC stage.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default ChangeLog\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst Perimetry = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Asset Tokenisation</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>There are two primary implementations of asset tokenisation:</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- Asset-backed tokens (e.g. Tether) are backed one-to-one by the physical good that they represent. It is simple however there are issues relating to the ownership of the property.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>- Synthetic tokens (e.g. mAssets by Mirror) provide synthetic exposure to the physical good without requiring one-to-one backing. These require higher levels of collateral to offset the market risk of underlying property.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>DimSim Tokenisation</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Yumcha adopts a hybrid method where holds collateral (like Mirror) but it transfers the market risk to Perimetry Pty Ltd to optimise capital efficiency.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Yumcha enters into a contract with Perimetry whereby the price variation of the underlying asset (e.g. VT) is transferred between the parties at a regular basis. That is Yumcha holds a long position with Perimetry.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Perimetry Pty Ltd holds a short position with Yumcha. To manage its own risk, it will hold an equal but opposite long position with brokers.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>In this arrangement there is no transfer of ownership of real shares but only a transfer of market risk from Yumcha to Perimetry to brokers.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default Perimetry\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst VanguardInfo = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>ycVT Token</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Yumcha first dimSim is pegged to a comprehensive world stocks ETF which provides maximum diversification at a low expense base.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Vanguard World Total Stocks</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Vanguard Total World Stock Index Fund offers unrivaled diversification. This comprehensive portfolio holds a piece of every investable stock in the world and marries it to a low fee that should be tough to beat over the long run. It earns a Morningstar Analyst Rating of Gold.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>This fund tracks the FTSE Global All-Cap Index, which includes stocks of all sizes listed in developed and emerging markets. It weights them by market capitalization, an approach that benefits investors by capturing the market’s collective opinion of each stock’s value while keeping turnover low. Market-cap weighting can be tough to beat because the market tends to accurately value stocks over the long run. Occasionally it will increase the fund’s exposure to expensive stocks when investors get excited about an area of the market. But this doesn’t undermine its long-term efficacy.</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default VanguardInfo\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst ContractInfo = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>Contract Information</Text></Row>\n        <Row><Text bold fontSize=\"13px\">Yumcha token</Text></Row>\n        <Row><Text fontSize=\"13px\">0xC7d0CE2961396d02059f06e8DF7Dd37E6809d478</Text></Row>\n        <Row><Text bold fontSize=\"13px\">Masterchef</Text></Row>\n        <Row><Text fontSize=\"13px\">0xe3641C835d9e441f2F36D96c89E19BEDB5E991e7</Text></Row>\n        <Row><Text bold fontSize=\"13px\">ycVT</Text></Row>\n        <Row><Text fontSize=\"13px\">0x7D0943bD8225848Ecd84Cdec36c39f4470494F07</Text></Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default ContractInfo\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst InfoCard = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const totalValue = useTotalValue()\n\n  let yumchaPerBlock = 0\n  if (farms && farms[0] && farms[0].yumchaPerBlock) {\n    yumchaPerBlock = new BigNumber(farms[0].yumchaPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row><Text bold>What is yumcha?</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Yumcha produces pegged assets (dimSims) which simulate the price of real-world assets. The collateral is used to generate revenue for yumcha tokens via buyback and burn.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Pegged dimSims</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Each dimSim that is in circulation is backed by a reserve of equivalent value and can be exchanged for stable cryptocurrency of equivalent value.</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve is hedged against the price movement of real-world asset via Perimetry Pty Ltd (based in Australia).</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The reserve is utilised to collect yields from farming platforms. These yields are used to buyback yumcha tokens.</Text></Row>\n        <Row><Text bold fontSize=\"13px\" style={{textAlign: \"justify\"}}>Liquidity provision</Text></Row>\n        <Row><Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>Providing liquidity via PancakeSwapV2 and staking on this website allows you to earn yumcha tokens. In addition, liquidity providers also earn 0.17% from every transaction.</Text></Row>\n        <Row>\n          <Text fontSize=\"13px\" style={{textAlign: \"justify\"}}>The total value of assets staked is:</Text>\n          <CardValue fontSize=\"13px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default InfoCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Text, BaseLayout, LinkExternal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTachometerAlt , faPlayCircle , faBook } from '@fortawesome/free-solid-svg-icons'\nimport { faTelegram , faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { Info } from 'react-feather'\nimport Divider from './components/Divider'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport Mechanics from './components/Mechanics'\nimport MechanicsUp from './components/MechanicsUp'\nimport MechanicsDown from './components/MechanicsDown'\nimport ChangeLog from './components/ChangeLog'\nimport Perimetry from './components/Perimetry'\nimport VanguardInfo from './components/VanguardInfo'\nimport ContractInfo from './components/ContractInfo'\nimport InfoCard from './components/InfoCard'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  // background-image: url('/images/egg/3.png');\n  // background-repeat: no-repeat;\n  // background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: center;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 16;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst faplaycircle = <FontAwesomeIcon icon={faPlayCircle} />\nconst fatacho = <FontAwesomeIcon icon={faTachometerAlt} />\nconst fabook = <FontAwesomeIcon icon={faBook} />\nconst fatelegram = <FontAwesomeIcon icon={faTelegram} />\nconst fatwitter = <FontAwesomeIcon icon={faTwitter} />\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      {/* <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'Yumcha')}\n        </Heading>\n        <Text>{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text>\n      </Hero> */}\n      <Flex style={{ display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n        <a href=\"/\" style={{ fontSize: '60px', color: '#ffffff', textAlign: 'center', fontFamily: 'Pacifico', marginBottom: '32px'}}>\n          Yumcha\n        </a>\n      </Flex>\n      <Flex justifyContent=\"center\" style={{ fontSize: '50px', color: '#ffffff'}}>\n        {/* <a href=\"/yc-farms\" style={{paddingRight: '20px'}}>{faplaycircle}</a>\n        <a href=\"dashboard\" style={{paddingRight: '8px'}}>{fatacho}</a>\n        <a href=\"https://docs.yumcha.finance/\" style={{paddingRight: '20px'}}>{fabook}</a>\n        <a href=\"https://t.me/yumchafinance\" style={{paddingRight: '20px'}}>{fatelegram}</a>\n        <a href=\"https://twitter.com/yumchaf\">{fatwitter}</a> */}\n      </Flex>\n      <Divider />\n      <div>\n        <Cards>\n          <InfoCard />\n          <CakeStats />\n          <VanguardInfo />\n          <ChangeLog />\n          <Perimetry />\n          <Mechanics />\n          <MechanicsUp />\n          <MechanicsDown />\n          <ContractInfo />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}