{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","config/index.ts","components/layout/Flex.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","utils/erc20.ts","components/UnlockButton.tsx","utils/callHelpers.ts","hooks/useWeb3.ts","config/constants/index.ts","hooks/useContract.ts","hooks/useStake.ts","hooks/useUnstake.ts","utils/formatBalance.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","hooks/useHarvest.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","Wrapper","DetailsSection","LinkExternal","theme","colors","primary","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","bold","style","fontSize","getContract","provider","address","Web3","eth","Contract","erc20","UnlockButton","props","TranslateString","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","pow","toString","on","tx","transactionHash","unstake","withdraw","harvest","RPC_URL","getRpcUrl","httpProvider","providers","HttpProvider","timeout","useWeb3","ethereum","refEth","useRef","useState","web3","setweb3","useEffect","current","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useContract","abi","contractOptions","contract","setContract","useMasterchef","masterChef","getMasterChefAddress","useStake","dispatch","useDispatch","onStake","useCallback","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","getBalanceNumber","balance","decimals","displayBalance","dividedBy","toNumber","getFullDisplayBalance","toFixed","StyledSpacer","size","Spacer","s","spacing","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","variant","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","alignItems","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","farmPid","useHarvest","rawEarningsBalance","mb","marginBottom","Action","CardActions","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","error","mt","fullWidth","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","FarmCard","expanded","cakePrice","bnbPrice","totalValue","toLowerCase","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","apy","minimumFractionDigits","risk","paddingBottom","display","height","width","Math","floor","tokenPriceVsQuote","lpSupply","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","activeIndex","as","Link","to","Text","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","activeFarms","multiplier","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","yumchaPerBlock","poolWeight","comparedTo","Page","textAlign","fontFamily","Flex","exact"],"mappings":"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","file":"static/js/5.23f83f16.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 350px;\n    max-width: 40.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <a\n          href={`https://dex.guru/token/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}-bsc`}\n        >\n          <Text bold style={{fontSize: \"18px\"}}>Chart</Text>\n        </a>\n        <a\n          href={\n            isTokenOnly\n              ? `https://exchange.pancakeswap.finance/#/swap?inputCurrency=0xe9e7cea3dedca5984780bafc599bd69add087d56&outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.pancakeswap.finance/#/swap?inputCurrency=${quoteTokenAdresses[process.env.REACT_APP_CHAIN_ID]}&outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n        >\n          <Text bold style={{fontSize: \"18px\"}}>Buy</Text>\n        </a>\n        <a\n          href={\n            isTokenOnly\n              ? `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          <Text bold style={{fontSize: \"18px\"}}>Add</Text>\n        </a>\n        <a\n          href={\n            isTokenOnly\n              ? `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.pancakeswap.finance/#/remove/${liquidityUrlPathParts}`\n          }\n        >\n          <Text bold style={{fontSize: \"18px\"}}>Rmv</Text>\n        </a>\n      </Flex>\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )} */}\n      {/* <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex> */}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          Claim YC\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 0px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <HarvestAction earnings={earnings} pid={pid} />\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 3px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 36px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'EGG'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'EGG' && <StyledCardAccent />}\n      {/* <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      /> */}\n      <Text bold style={{fontSize: \"36px\"}}>\n        {lpLabel}\n      </Text>\n      <DetailsSection\n        removed={removed}\n        isTokenOnly={farm.isTokenOnly}\n        bscScanAddress={\n          farm.isTokenOnly\n            ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n        }\n        totalValueFormated={totalValueFormated}\n        lpLabel={lpLabel}\n        quoteTokenAdresses={quoteTokenAdresses}\n        quoteTokenSymbol={quoteTokenSymbol}\n        tokenAddresses={tokenAddresses}\n      />\n      <Divider />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text bold style={{fontSize: \"20px\", paddingBottom: \"10px\"}}>{TranslateString(352, 'APR')}</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center', fontSize: \"20px\", paddingBottom: \"10px\"}}>\n            {farm.apy ? (\n              <>\n                {/* <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                /> */}\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      {/* <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex> */}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(10006, 'Price')}</Text>\n        <Text>${Math.floor(+farm.tokenPriceVsQuote*1000)/1000}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(10008, 'LP Price')}</Text>\n        <Text>${Math.floor((+farm.lpTotalInQuoteToken)/(+farm.lpSupply)*1000)/1000}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(10007, 'TVL')}</Text>\n        <Text>{totalValueFormated}</Text>\n      </Flex>\n      <Divider />\n      {/* <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      /> */}\n      {/* <ExpandingWrapper expanded={showExpandableSection}> */}\n       <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      {/* </ExpandingWrapper> */}\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      {/* <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper> */}\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 0px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Flex, Text, Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.yumchaPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Flex style={{ display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n        <a href=\"/\" style={{ fontSize: '60px', color: '#ffffff', textAlign: 'center', fontFamily: 'Pacifico', marginBottom: '32px'}}>\n          Yumcha\n        </a>\n      </Flex>\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn EGG')\n            :\n          TranslateString(320, 'Stake LP tokens to earn EGG')\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading> */}\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}