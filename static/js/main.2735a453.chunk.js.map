{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","state/hooks.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","utils/multicall.ts","config/constants/contracts.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","components/PageLoader.tsx","App.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpSupply","BigNumber","div","pow","tokenAmount","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","yumchaPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","ZERO","useFetchPublicData","useDispatch","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","i","val","BNB","CAKE","plus","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","cake","56","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingyumcha","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","Wrapper","PageLoader","Home","lazy","Farms","NotFound","config","EXPONENTIAL_AT","DECIMAL_PLACES","Background","App","useWallet","connect","window","localStorage","getItem","Global","fallback","path","component","memo","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.2735a453.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      const lpSupply = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18))\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, yumchaPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'yumchaPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpSupply: lpSupply.toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        yumchaPerBlock: new BigNumber(yumchaPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingyumcha',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 17 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 13 // EGG-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export default {\n  cake: {\n    56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    97: '',\n  },\n  masterChef: {\n    56: '0xe3641C835d9e441f2F36D96c89E19BEDB5E991e7',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingyumcha('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 13,\n    risk: 5,\n    lpSymbol: 'yumcha-BUSD v2',\n    lpAddresses: {\n      97: '',\n      56: '0xB8e9F08AF28CA20F9F93e7CA3CdA37d63cB2e99A',\n    },\n    tokenSymbol: 'yumcha',\n    tokenAddresses: {\n      97: '',\n      56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 18,\n    risk: 5,\n    lpSymbol: 'yumcha-BNB v2',\n    lpAddresses: {\n      97: '',\n      56: '0xb3aed717ff994eaac638f005997a7a06d1731cdf',\n    },\n    tokenSymbol: 'yumcha',\n    tokenAddresses: {\n      97: '',\n      56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 10,\n    risk: 5,\n    lpSymbol: 'yumcha-BNB v1',\n    lpAddresses: {\n      97: '',\n      56: '0xE716FbCE470e7AADdb5f149548A70347d38a0B1D',\n    },\n    tokenSymbol: 'yumcha',\n    tokenAddresses: {\n      97: '',\n      56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 17,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD v2',\n    lpAddresses: {\n      97: '',\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 16,\n    risk: 1,\n    lpSymbol: 'ycVT-BUSD v2',\n    lpAddresses: {\n      97: '',\n      56: '0x76d3aE094A8aB49dB6C551a4f2C304Ab431a966C',\n    },\n    tokenSymbol: 'ycVT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7d0943bd8225848ecd84cdec36c39f4470494f07',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'yumcha',\n    lpAddresses: {\n      97: '',\n      56: '0xB8e9F08AF28CA20F9F93e7CA3CdA37d63cB2e99A', // yumcha-BUSD LP\n    },\n    tokenSymbol: 'yumcha',\n    tokenAddresses: {\n      97: '',\n      56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'yumcha-BUSD v1',\n    lpAddresses: {\n      97: '',\n      56: '0xD7c43A10F6e92c6F1aB13096AE4a08DD8F8c3c8A',\n    },\n    tokenSymbol: 'yumcha',\n    tokenAddresses: {\n      97: '',\n      56: '0xc7d0ce2961396d02059f06e8df7dd37e6809d478',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'ycVT-BUSD v1',\n    lpAddresses: {\n      97: '',\n      56: '0x90e0a1d4d1408Ec4eD7aFc0F6fCC3De034831404',\n    },\n    tokenSymbol: 'ycVT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7d0943bd8225848ecd84cdec36c39f4470494f07',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 6,\n    risk: 5,\n    lpSymbol: 'ycVT-yumcha v1',\n    lpAddresses: {\n      97: '',\n      56: '0x2a379957467ee0168FE62aE49E462Cb5fC15Be68',\n    },\n    tokenSymbol: 'ycVT',\n    tokenAddresses: {\n      97: '',\n      56: '0x7d0943bd8225848ecd84cdec36c39f4470494f07',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n  {\n    pid: 14,\n    risk: 5,\n    lpSymbol: 'ycCMC-BUSD v2',\n    lpAddresses: {\n      97: '',\n      56: '0x4402980E403195280F05a76D794E77B1Ff9412F0',\n    },\n    tokenSymbol: 'ycCMC',\n    tokenAddresses: {\n      97: '',\n      56: '0xa955809418cd146c492918d50c680f1fb4cefe40',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  }\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Roboto', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport styled from 'styled-components'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\n// import Header from './components/Header'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst Background = styled.div`\n  background-image: url('/yc-front/images/background2.png');\n  background-size: cover;\n  background-position: center;\n  background-attachment: fixed;\n`\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Background>\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      {/* <Menu> */}\n      <Suspense fallback={<PageLoader />}>\n        <Switch>\n          <Route path=\"/yc-front/info\">\n            <Home />\n          </Route>\n          <Route path=\"/yc-front\">\n            <Farms />\n          </Route>\n          {/* <Route path=\"/nests\">\n            <Farms tokenMode />\n          </Route> */}\n          {/* <Route path=\"/pools\"> */}\n          {/*  <Pools /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/lottery\"> */}\n          {/*  <Lottery /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/ifo\"> */}\n          {/*  <Ifos /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/nft\"> */}\n          {/*  <Nft /> */}\n          {/* </Route> */}\n          {/* Redirect */}\n          {/* <Route path=\"/staking\"> */}\n          {/*  <Redirect to=\"/pools\" /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/syrup\"> */}\n          {/*  <Redirect to=\"/pools\" /> */}\n          {/* </Route> */}\n          {/* 404 */}\n          <Route component={NotFound} />\n        </Switch>\n      </Suspense>\n      {/* </Menu> */}\n      {/* <NftGlobalNotification /> */}\n    </Router>\n    </Background>\n  )\n}\n\nexport default React.memo(App)\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}